# The database used in this project was Spotify data downloaded from Kaggle
# I used this data to create a table involving the Spotify data and then proceeded to use sequel to perform, analytics on said data

#Table Creation
CREATE TABLE BIT_DB0.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

#After the table was made I proceeded to insert the Spotify Data .csv into my newly created table

# Finally I thought of some prompts and ways to explore the data presented 
SELECT * from SpotifyData;


# First I determined the average danceability by artist and track
SELECT artist_name, track_name, avg(danceability)
FROM Spotifydata
GROUP BY artist_name, track_name;


# Second I found the top 10 artists based on their popularity score
SELECT artist_name, popularity, track_name
FROM Spotifydata
GROUP BY artist_name
ORDER BY popularity desc LIMIT 10;


# Then I searched for who made the longest song on the list
SELECT artist_name, track_name, duration_ms
FROM Spotifydata
ORDER BY duration_ms desc LIMIT 1;


# Then I searched the average danceability for the top 10 most popular tracks
SELECT artist_name, track_name, popularity, avg(danceability)
FROM Spotifydata
GROUP BY track_name
ORDER BY popularity desc LIMIT 10;


#Finally I researched the average tempo for the most popular artist which I was able to find out due to my second query
SELECT artist_name, avg(tempo) 
FROM Spotifydata
WHERE artist_name = 'Ed Sheeran'
order by avg(tempo) desc LIMIT 10;
